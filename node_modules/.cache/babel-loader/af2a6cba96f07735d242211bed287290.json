{"ast":null,"code":"/* eslint-disable no-console */\n\n/* eslint-disable no-unused-vars */\nimport { useState } from 'react';\nimport uuid from 'uuid/v4';\nimport useLocalStorageState from './useLocalStorageState';\nexport default (initialTodos => {\n  // UselocalStorage state will initialize the state and make the state for us.\n  // Bsed off of localstorage. we are using useLocalStorageState to make sure to handle the\n  // Localstorage functionality here.\n  const [todos, setTodos] = useLocalStorageState('todos', initialTodos);\n  console.log('THESE ARE THE TODOS INSIDE USETODOSTATE HOOK', todos);\n  return {\n    todos,\n    addTodo: newTodoText => {\n      setTodos([...todos, {\n        id: uuid(),\n        task: newTodoText,\n        completed: false\n      }]);\n    },\n    removeTodo: todoId => {\n      console.log('removetodocalled'); // filter out removed todo\n\n      const updatedTodos = todos.filter(todo => todo.id !== todoId);\n      console.log(updatedTodos); // call setTodos with new todosArray\n\n      setTodos(updatedTodos);\n      /* console.log('These are the updated todos', todos); */\n    },\n    editTodo: (todoId, newTodoText) => {\n      console.log('editTodoCalled'); // filter out removed todo\n\n      /*  const updatedTodos = todos.filter((todo) => todo.id === todoId);\n         /*  console.log(updatedTodos); */\n\n      /*  updatedTodos.task = newTodoText; */\n      // call setTodos with new todosArray\n\n      const updatedTodos = todos.map(todo => todo.id === todoId ? { ...todo,\n        task: newTodoText\n      } : todo);\n      console.log('this is the new todos changed from edit', updatedTodos);\n      setTodos(updatedTodos);\n      /* console.log('These are the updated todos', todos); */\n    },\n    toggleTodo: todoId => {\n      const updatedTodos = todos.map(todo => todo.id === todoId ? { ...todo,\n        completed: !todo.completed\n      } : todo);\n      setTodos(updatedTodos);\n    }\n  };\n});\n/* const addTodo = (newTodoText) => {\n  setTodos([...todos, { id: uuid(), task: newTodoText, completed: false }]);\n}; */\n/// /////\n/// /////\n\n/* const removeTodo = (todoId) => {\n  console.log('removetodocalled');\n   filter out removed todo\n  const updatedTodos = todos.filter((todo) => todo.id !== todoId);\n  console.log(updatedTodos);\n   call setTodos with new todosArray\n  setTodos(updatedTodos);\n  console.log('These are the updated todos', todos);\n};\n */\n/// /////\n/// /////\n\n/* const editTodo = (todoId, newTodoText) => {\n   console.log('editTodoCalled');\n   filter out removed todo\n   const updatedTodos = todos.filter((todo) => todo.id === todoId);\n   console.log(updatedTodos);\n   updatedTodos.task = newTodoText;\n   call setTodos with new todosArray\n  const updatedTodos = todos.map((todo) => (todo.id === todoId ? { ...todo, task: newTodoText } : todo));\n  console.log('this is the new todos changed from edit', updatedTodos);\n  setTodos(updatedTodos);\n  console.log('These are the updated todos', todos);\n};\n */\n\n/* const toggleTodo = (todoId) => {\n\tconst updatedTodos = todos.map((todo) => (todo.id === todoId ? {\n\t  ...todo,\n\t  completed: !todo.completed,\n\t} : todo));\n\tsetTodos(updatedTodos);\n  };\n */","map":{"version":3,"sources":["/Users/marcowurtz/Documents/GitHub/GraphQLTodoApp/GraphQLTodoApp/src/Hooks/useTodoState.jsx"],"names":["useState","uuid","useLocalStorageState","initialTodos","todos","setTodos","console","log","addTodo","newTodoText","id","task","completed","removeTodo","todoId","updatedTodos","filter","todo","editTodo","map","toggleTodo"],"mappings":"AAAA;;AACA;AAEA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AAEA,gBAAgBC,YAAD,IAAkB;AAChC;AACA;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,oBAAoB,CAAC,OAAD,EAAUC,YAAV,CAA9C;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA4DH,KAA5D;AAEA,SAAO;AACNA,IAAAA,KADM;AAGNI,IAAAA,OAAO,EAAGC,WAAD,IAAiB;AACzBJ,MAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW;AAAEM,QAAAA,EAAE,EAAET,IAAI,EAAV;AAAcU,QAAAA,IAAI,EAAEF,WAApB;AAAiCG,QAAAA,SAAS,EAAE;AAA5C,OAAX,CAAD,CAAR;AACA,KALK;AAMNC,IAAAA,UAAU,EAAGC,MAAD,IAAY;AACvBR,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EADuB,CAEvB;;AACA,YAAMQ,YAAY,GAAGX,KAAK,CAACY,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACP,EAAL,KAAYI,MAAnC,CAArB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYQ,YAAZ,EAJuB,CAKvB;;AACAV,MAAAA,QAAQ,CAACU,YAAD,CAAR;AACA;AACA,KAdK;AAeNG,IAAAA,QAAQ,EAAE,CAACJ,MAAD,EAASL,WAAT,KAAyB;AAClCH,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EADkC,CAElC;;AACA;;;AAEA;AACA;;AACA,YAAMQ,YAAY,GAAGX,KAAK,CAACe,GAAN,CAAWF,IAAD,IAAWA,IAAI,CAACP,EAAL,KAAYI,MAAZ,GACvC,EAAE,GAAGG,IAAL;AAAWN,QAAAA,IAAI,EAAEF;AAAjB,OADuC,GACNQ,IADf,CAArB;AAEAX,MAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAAuDQ,YAAvD;AACAV,MAAAA,QAAQ,CAACU,YAAD,CAAR;AACA;AACA,KA3BK;AA6BNK,IAAAA,UAAU,EAAGN,MAAD,IAAY;AACvB,YAAMC,YAAY,GAAGX,KAAK,CAACe,GAAN,CAAWF,IAAD,IAAWA,IAAI,CAACP,EAAL,KAAYI,MAAZ,GAAqB,EAC9D,GAAGG,IAD2D;AAE9DL,QAAAA,SAAS,EAAE,CAACK,IAAI,CAACL;AAF6C,OAArB,GAGtCK,IAHiB,CAArB;AAIAZ,MAAAA,QAAQ,CAACU,YAAD,CAAR;AACA;AAnCK,GAAP;AAsCA,CA9CD;AAgDA;;;AAIA;AACA;;AAEA;;;;;;;;;;AAUA;AACA;;AAEA;;;;;;;;;;;;;;AAcA","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\n\nimport { useState } from 'react';\nimport uuid from 'uuid/v4';\nimport useLocalStorageState from './useLocalStorageState';\n\nexport default (initialTodos) => {\n\t// UselocalStorage state will initialize the state and make the state for us.\n\t// Bsed off of localstorage. we are using useLocalStorageState to make sure to handle the\n\t// Localstorage functionality here.\n\tconst [todos, setTodos] = useLocalStorageState('todos', initialTodos);\n\n\tconsole.log('THESE ARE THE TODOS INSIDE USETODOSTATE HOOK', todos);\n\n\treturn {\n\t\ttodos,\n\n\t\taddTodo: (newTodoText) => {\n\t\t\tsetTodos([...todos, { id: uuid(), task: newTodoText, completed: false }]);\n\t\t},\n\t\tremoveTodo: (todoId) => {\n\t\t\tconsole.log('removetodocalled');\n\t\t\t// filter out removed todo\n\t\t\tconst updatedTodos = todos.filter((todo) => todo.id !== todoId);\n\t\t\tconsole.log(updatedTodos);\n\t\t\t// call setTodos with new todosArray\n\t\t\tsetTodos(updatedTodos);\n\t\t\t/* console.log('These are the updated todos', todos); */\n\t\t},\n\t\teditTodo: (todoId, newTodoText) => {\n\t\t\tconsole.log('editTodoCalled');\n\t\t\t// filter out removed todo\n\t\t\t/*  const updatedTodos = todos.filter((todo) => todo.id === todoId);\n\t\t\t   /*  console.log(updatedTodos); */\n\t\t\t/*  updatedTodos.task = newTodoText; */\n\t\t\t// call setTodos with new todosArray\n\t\t\tconst updatedTodos = todos.map((todo) => (todo.id === todoId\n\t\t\t\t? { ...todo, task: newTodoText } : todo));\n\t\t\tconsole.log('this is the new todos changed from edit', updatedTodos);\n\t\t\tsetTodos(updatedTodos);\n\t\t\t/* console.log('These are the updated todos', todos); */\n\t\t},\n\n\t\ttoggleTodo: (todoId) => {\n\t\t\tconst updatedTodos = todos.map((todo) => (todo.id === todoId ? {\n\t\t\t\t...todo,\n\t\t\t\tcompleted: !todo.completed,\n\t\t\t} : todo));\n\t\t\tsetTodos(updatedTodos);\n\t\t},\n\n\t};\n};\n\n/* const addTodo = (newTodoText) => {\n  setTodos([...todos, { id: uuid(), task: newTodoText, completed: false }]);\n}; */\n\n/// /////\n/// /////\n\n/* const removeTodo = (todoId) => {\n  console.log('removetodocalled');\n   filter out removed todo\n  const updatedTodos = todos.filter((todo) => todo.id !== todoId);\n  console.log(updatedTodos);\n   call setTodos with new todosArray\n  setTodos(updatedTodos);\n  console.log('These are the updated todos', todos);\n};\n */\n/// /////\n/// /////\n\n/* const editTodo = (todoId, newTodoText) => {\n   console.log('editTodoCalled');\n   filter out removed todo\n   const updatedTodos = todos.filter((todo) => todo.id === todoId);\n   console.log(updatedTodos);\n   updatedTodos.task = newTodoText;\n   call setTodos with new todosArray\n  const updatedTodos = todos.map((todo) => (todo.id === todoId ? { ...todo, task: newTodoText } : todo));\n  console.log('this is the new todos changed from edit', updatedTodos);\n  setTodos(updatedTodos);\n  console.log('These are the updated todos', todos);\n};\n */\n\n/* const toggleTodo = (todoId) => {\n\tconst updatedTodos = todos.map((todo) => (todo.id === todoId ? {\n\t  ...todo,\n\t  completed: !todo.completed,\n\t} : todo));\n\tsetTodos(updatedTodos);\n  };\n */\n"]},"metadata":{},"sourceType":"module"}