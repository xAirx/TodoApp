{"ast":null,"code":"var _jsxFileName = \"/Users/marcowurtz/Documents/GitHub/GraphQLTodoApp/GraphQLTodoApp/src/MUIthemeExample/MUIApp.jsx\";\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-unneeded-ternary */\n\n/* eslint-disable no-console */\n\n/* eslint-disable no-shadow */\n\n/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport '../css/style.css';\nimport { FormControlLabel, createMuiTheme, Switch, IconButton } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\n/* import SearchIcon from '@material-ui/icons/Search';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport uuid from 'uuid/v4'; */\n\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\nimport { ThemeWrapper, useDarkmode } from './index';\nimport TodoList from '../TodoList';\nimport TodoForm from '../TodoForm';\nimport useTodoState from '../Hooks/useTodoState';\nimport useLocalStorageState from '../Hooks/useLocalStorageState';\nexport default function MUIapp() {\n  /*   Users might have specified a preference for a light or dark theme.\n  The method by which the user expresses their preference can vary.\n  It might be a system-wide setting exposed by the Operating System,\n  or a setting controlled by the User Agent.\n   \n  You can leverage this preference dynamically with the useMediaQuery\n  hook and the prefers-color-scheme media query.\n   \n  For instance, you can enable the dark mode automatically: */\n  const [theme, toggleDarkMode] = useDarkmode();\n  console.log('THIS IS THEME INSIDE APP', theme);\n  const themeConfig = createMuiTheme(theme);\n  const useStyles = makeStyles(() => ({\n    root: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: themeConfig.spacing(2)\n    },\n    toolbar: {\n      /*  minHeight: 128, */\n\n      /* alignItems: 'flex-center', */\n\n      /*  paddingTop: themeConfig.spacing(1), */\n\n      /* paddingBottom: themeConfig.spacing(3), */\n      background: themeConfig.palette.background.paper,\n      boxShadow: '0px 10px 13px -7px #000000, 5px 5px 15px 5px rgba(0,0,0,0)'\n    },\n    title: {\n      flexGrow: 1,\n      alignSelf: 'center'\n    },\n    muipapermain: {\n      /* root: { */\n\n      /* background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)', */\n      border: 0,\n      borderRadius: 3,\n\n      /* boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)', */\n\n      /* color: 'white', */\n\n      /* height: 48, */\n\n      /*  padding: '0 30px', */\n      height: '100vh',\n      padding: themeConfig.spacing(2),\n      textAlign: 'center',\n      background: themeConfig.palette.background.paper\n      /* } */\n\n    }\n  }));\n  const classes = useStyles(); /// /////\n  /// /////\n  /// /////\n  /// /////\n  /// /////\n  /// /////\n  /// /////\n  /// /////\n\n  /* Now if we had another piece of state that we wanted distinct to local storage whenever it changed we\n   would need to duplicate this code duplicate this code:\n   \n  // This required us to return null inside todolist else react will crash because TODOS isnt containing anything.\n  /*   const initialTodos = JSON.parse(window.localStorage.getItem('todos')) || [\"\"];\n   \n  /* Instead we could make a new hook a custom hook called use local storage state.\n   \n   And all we would do is pass in something like this.\n   \n  /// /////\n  /// /////\n   const [todos] = useLocalStorageState(\"todos\", []);\n  /// /////\n  /// /////\n   \n   Use local storage state.\n   We would give it a key.\n   So in our case to dos and then a default value and we could pass in an array instead of the string of\n   an array.\n   \n   So we pass in an array and then it's going to return to dos just like we have now.\n   Something like that and maybe set to dos and then anytime we change to dos it will automatically sync\n   to local storage.\n   \n   So that way we can move this code out move this code out.\n   But also if we wanted to save anything to local storage and have it update or sync anytime that piece\n   of State changed we could use that in this application in another application.\n   \n   It's a pretty common use case.\n   So if we wanted to add in a dark mode or a light mode or a language preference like if a user could\n   specify French instead of English we might want to store that in local storage but that doesn't really\n   belong with the to dos in that array. You'd need a separate piece of state a separate piece of local storage so it would be best to use a\n   \n   custom hook. as seen below: useLocalStorageState.\n    */\n  /// /////\n  /// /////\n\n  const initialTodos = [{\n    id: 1,\n    task: 'Get started writing your own todos here!',\n    completed: false\n  }];\n  /*   = JSON.parse(window.localStorage.getItem('todos')) || [{ id: 1, task: 'Get started writing your own todos here!', completed: false }];\n    */\n  // We can easily set and initialize our state and localstorage like this:\n\n  /*   const [mood, setMood] = useLocalStorageState('mood', 'happy');\n  console.log(mood); */\n\n  const {\n    todos,\n    addTodo,\n    removeTodo,\n    toggleTodo,\n    editTodo\n  } = useTodoState(initialTodos); /// /////\n  /// /////\n\n  /*   const initialTodos = [\n    { id: 1, task: 'Buy Cucumber', completed: false },\n    { id: 2, task: 'Buy Eggs', completed: true },\n    { id: 3, task: 'Buy Bread', completed: false },\n  ];\n    */\n\n  return /*#__PURE__*/React.createElement(ThemeWrapper, {\n    theme: themeConfig,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    color: \"transparent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    className: classes.toolbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"light and dark mode toggle\",\n    edge: \"end\",\n    justify: \"center\",\n    color: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    style: {\n      marginRight: '20px',\n      marginTop: '6px'\n    },\n    noWrap: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 8\n    }\n  }, themeConfig.palette.type === 'dark' ? /*#__PURE__*/React.createElement(Brightness4Icon, {\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 12\n    }\n  }) : /*#__PURE__*/React.createElement(Brightness7Icon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 12\n    }\n  })), /*#__PURE__*/React.createElement(FormControlLabel, {\n    checked: themeConfig.palette.type === 'dark',\n    control: /*#__PURE__*/React.createElement(Switch, {\n      onClick: toggleDarkMode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 18\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 8\n    }\n  })))), /*#__PURE__*/React.createElement(Paper, {\n    className: classes.muipapermain,\n    variant: \"outlined\",\n    square: true,\n    elevation: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    style: {\n      marginTop: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 11,\n    md: 8,\n    lg: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TodoList, {\n    todos: todos,\n    removeTodo: removeTodo,\n    toggleTodo: toggleTodo,\n    editTodo: editTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(TodoForm, {\n    addTodo: addTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 8\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/marcowurtz/Documents/GitHub/GraphQLTodoApp/GraphQLTodoApp/src/MUIthemeExample/MUIApp.jsx"],"names":["React","useEffect","FormControlLabel","createMuiTheme","Switch","IconButton","Grid","Paper","AppBar","Toolbar","Typography","MenuIcon","makeStyles","Brightness7Icon","Brightness4Icon","ThemeWrapper","useDarkmode","TodoList","TodoForm","useTodoState","useLocalStorageState","MUIapp","theme","toggleDarkMode","console","log","themeConfig","useStyles","root","flexGrow","menuButton","marginRight","spacing","toolbar","background","palette","paper","boxShadow","title","alignSelf","muipapermain","border","borderRadius","height","padding","textAlign","classes","initialTodos","id","task","completed","todos","addTodo","removeTodo","toggleTodo","editTodo","marginTop","type"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-unneeded-ternary */\n/* eslint-disable no-console */\n/* eslint-disable no-shadow */\n/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport '../css/style.css';\nimport {\n\tFormControlLabel, createMuiTheme, Switch,\n\tIconButton,\n} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\n/* import SearchIcon from '@material-ui/icons/Search';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport uuid from 'uuid/v4'; */\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\nimport { ThemeWrapper, useDarkmode } from './index';\nimport TodoList from '../TodoList';\nimport TodoForm from '../TodoForm';\nimport useTodoState from '../Hooks/useTodoState';\nimport useLocalStorageState from '../Hooks/useLocalStorageState';\n\nexport default function MUIapp() {\n\t/*   Users might have specified a preference for a light or dark theme.\n\tThe method by which the user expresses their preference can vary.\n\tIt might be a system-wide setting exposed by the Operating System,\n\tor a setting controlled by the User Agent.\n  \n\tYou can leverage this preference dynamically with the useMediaQuery\n\thook and the prefers-color-scheme media query.\n  \n\tFor instance, you can enable the dark mode automatically: */\n\n\tconst [theme, toggleDarkMode] = useDarkmode();\n\tconsole.log('THIS IS THEME INSIDE APP', theme);\n\n\tconst themeConfig = createMuiTheme(theme);\n\n\tconst useStyles = makeStyles(() => ({\n\t\troot: {\n\t\t\tflexGrow: 1,\n\t\t},\n\n\t\tmenuButton: {\n\t\t\tmarginRight: themeConfig.spacing(2),\n\t\t},\n\t\ttoolbar: {\n\t\t\t/*  minHeight: 128, */\n\t\t\t/* alignItems: 'flex-center', */\n\t\t\t/*  paddingTop: themeConfig.spacing(1), */\n\t\t\t/* paddingBottom: themeConfig.spacing(3), */\n\t\t\tbackground: themeConfig.palette.background.paper,\n\t\t\tboxShadow: '0px 10px 13px -7px #000000, 5px 5px 15px 5px rgba(0,0,0,0)',\n\n\t\t},\n\t\ttitle: {\n\t\t\tflexGrow: 1,\n\t\t\talignSelf: 'center',\n\t\t},\n\t\tmuipapermain: {\n\t\t\t/* root: { */\n\t\t\t/* background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)', */\n\t\t\tborder: 0,\n\t\t\tborderRadius: 3,\n\t\t\t/* boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)', */\n\t\t\t/* color: 'white', */\n\t\t\t/* height: 48, */\n\t\t\t/*  padding: '0 30px', */\n\t\t\theight: '100vh',\n\t\t\tpadding: themeConfig.spacing(2),\n\t\t\ttextAlign: 'center',\n\n\t\t\tbackground: themeConfig.palette.background.paper\n\t\t\t/* } */\n\t\t},\n\t}));\n\n\tconst classes = useStyles();\n\t/// /////\n\t/// /////\n\t/// /////\n\t/// /////\n\t/// /////\n\t/// /////\n\t/// /////\n\t/// /////\n\n\t/* Now if we had another piece of state that we wanted distinct to local storage whenever it changed we\n  would need to duplicate this code duplicate this code:\n  \n\t// This required us to return null inside todolist else react will crash because TODOS isnt containing anything.\n\t/*   const initialTodos = JSON.parse(window.localStorage.getItem('todos')) || [\"\"];\n  \n\t/* Instead we could make a new hook a custom hook called use local storage state.\n  \n  And all we would do is pass in something like this.\n  \n\t/// /////\n\t/// /////\n  const [todos] = useLocalStorageState(\"todos\", []);\n\t/// /////\n\t/// /////\n  \n  Use local storage state.\n  We would give it a key.\n  So in our case to dos and then a default value and we could pass in an array instead of the string of\n  an array.\n  \n  So we pass in an array and then it's going to return to dos just like we have now.\n  Something like that and maybe set to dos and then anytime we change to dos it will automatically sync\n  to local storage.\n  \n  So that way we can move this code out move this code out.\n  But also if we wanted to save anything to local storage and have it update or sync anytime that piece\n  of State changed we could use that in this application in another application.\n  \n  It's a pretty common use case.\n  So if we wanted to add in a dark mode or a light mode or a language preference like if a user could\n  specify French instead of English we might want to store that in local storage but that doesn't really\n  belong with the to dos in that array. You'd need a separate piece of state a separate piece of local storage so it would be best to use a\n  \n  custom hook. as seen below: useLocalStorageState.\n   */\n\n\t/// /////\n\t/// /////\n\n\tconst initialTodos = [{ id: 1, task: 'Get started writing your own todos here!', completed: false }];\n\n\t/*   = JSON.parse(window.localStorage.getItem('todos')) || [{ id: 1, task: 'Get started writing your own todos here!', completed: false }];\n   */\n\n\t// We can easily set and initialize our state and localstorage like this:\n\t/*   const [mood, setMood] = useLocalStorageState('mood', 'happy');\n\tconsole.log(mood); */\n\n\tconst {\n\t\ttodos, addTodo, removeTodo, toggleTodo, editTodo,\n\t} = useTodoState(initialTodos);\n\t/// /////\n\t/// /////\n\n\t/*   const initialTodos = [\n\t  { id: 1, task: 'Buy Cucumber', completed: false },\n\t  { id: 2, task: 'Buy Eggs', completed: true },\n\t  { id: 3, task: 'Buy Bread', completed: false },\n\t];\n   */\n\n\treturn (\n\t\t<ThemeWrapper theme={themeConfig}>\n\t\t\t<div className={classes.root}>\n\t\t\t\t<AppBar position=\"static\" color=\"transparent\">\n\t\t\t\t\t<Toolbar className={classes.toolbar}>\n\n\t\t\t\t\t\t{/*     <IconButton aria-label=\"search\" color=\"inherit\">\n              <SearchIcon />\n            </IconButton>\n            <IconButton aria-label=\"display more actions\" edge=\"end\" color=\"inherit\">\n              <MoreVertIcon />\n            </IconButton> */}\n\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\taria-label=\"light and dark mode toggle\"\n\t\t\t\t\t\t\tedge=\"end\"\n\t\t\t\t\t\t\tjustify=\"center\"\n\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\tclassName={classes.title}\n\t\t\t\t\t\t\t\tstyle={{ marginRight: '20px', marginTop: '6px' }}\n\t\t\t\t\t\t\t\tnoWrap\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{themeConfig.palette.type === 'dark'\n\t\t\t\t\t\t\t\t\t? <Brightness4Icon variant=\"outlined\" />\n\t\t\t\t\t\t\t\t\t: <Brightness7Icon />}\n\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\tchecked={themeConfig.palette.type === 'dark'}\n\t\t\t\t\t\t\t\tcontrol={<Switch onClick={toggleDarkMode} />}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t\t<Paper\n\t\t\t\t\tclassName={classes.muipapermain}\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tsquare\n\t\t\t\t\televation={3}\n\t\t\t\t>\n\t\t\t\t\t<Grid container justify=\"center\" style={{ marginTop: '1rem' }}>\n\t\t\t\t\t\t<Grid item xs={11} md={8} lg={4}>\n\t\t\t\t\t\t\t<TodoList\n\t\t\t\t\t\t\t\ttodos={todos}\n\t\t\t\t\t\t\t\tremoveTodo={removeTodo}\n\t\t\t\t\t\t\t\ttoggleTodo={toggleTodo}\n\t\t\t\t\t\t\t\teditTodo={editTodo}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<TodoForm addTodo={addTodo} />\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t{/*             <button onClick={() => setMood('angry')}>Click to get angry and test localStorage</button>\n */}\n\t\t\t\t\t</Grid>\n\t\t\t\t</Paper>\n\n\t\t\t</div>\n\t\t</ThemeWrapper>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}