{"ast":null,"code":"/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react'; // if there is nothing in localStorage under the key we will use the defaultVal.\n\nfunction UseLocalStorageState(key, defaultVal) {\n  /*\n  Make a piece of state but initialize it to some piece of local storage and\n  by the way whenever it changes make sure you update local storage as well and then\n  return that piece of state and a function to set\n  that piece of state. */\n  const [state, setState] = useState(() => {\n    let val;\n\n    try {\n      // See if there is something in localStorage with val...\n      val = JSON.parse(window.localStorage.getItem(key) || String(defaultVal));\n    } catch (e) {\n      /// if there is nothing in localStorage set val to defaultVal\n      val = defaultVal;\n    }\n\n    return val;\n  });\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state]);\n  return [state, setState];\n}\n/*\nThe last thing to do is return something from our hook so our hook needs\nto return both the state and\na way of setting that state.\n\nSo we'll just do return state and set state so from the other side of\n'things when we use this hook we\n\nwould just do something like this:\n\nconst [todos, setTodos] = useLocalStorageStatet(\"todos\", []):\n\nconcept to use comma set to DOS equals use local storage state of\nto do is never give it an initial value like an array.\n\nAnd from our end of things we would use this code used to dos and set to\nlose just like they came right\nback from use state.\n\nThe only change is that we intercepted it.\n\nWe base the value in the state the initial value based off of local\nstorage and we have this use effect\n\nthat is listening for a change on to dos and will automatically sync with local storage.\n */\n\n\nexport default UseLocalStorageState;","map":{"version":3,"sources":["/Users/marcowurtz/Documents/GitHub/GraphQLTodoApp/GraphQLTodoApp/src/Hooks/useLocalStorageState.jsx"],"names":["useState","useEffect","UseLocalStorageState","key","defaultVal","state","setState","val","JSON","parse","window","localStorage","getItem","String","e","setItem","stringify"],"mappings":"AAAA;AAEA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,SAASC,oBAAT,CAA8BC,GAA9B,EAAmCC,UAAnC,EAA+C;AAC7C;;;;;AAOA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,MAAM;AACvC,QAAIO,GAAJ;;AACA,QAAI;AACF;AACAA,MAAAA,GAAG,GAAGC,IAAI,CAACC,KAAL,CACJC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BT,GAA5B,KAAoCU,MAAM,CAACT,UAAD,CADtC,CAAN;AAGD,KALD,CAKE,OAAOU,CAAP,EAAU;AACV;AACAP,MAAAA,GAAG,GAAGH,UAAN;AACD;;AACD,WAAOG,GAAP;AACD,GAZiC,CAAlC;AAcAN,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4BZ,GAA5B,EAAiCK,IAAI,CAACQ,SAAL,CAAeX,KAAf,CAAjC;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAGA,SAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,eAAeJ,oBAAf","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { useState, useEffect } from 'react';\n\n// if there is nothing in localStorage under the key we will use the defaultVal.\nfunction UseLocalStorageState(key, defaultVal) {\n  /*\nMake a piece of state but initialize it to some piece of local storage and\n by the way whenever it changes make sure you update local storage as well and then\n return that piece of state and a function to set\n\nthat piece of state. */\n\n  const [state, setState] = useState(() => {\n    let val;\n    try {\n      // See if there is something in localStorage with val...\n      val = JSON.parse(\n        window.localStorage.getItem(key) || String(defaultVal),\n      );\n    } catch (e) {\n      /// if there is nothing in localStorage set val to defaultVal\n      val = defaultVal;\n    }\n    return val;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state]);\n  return [state, setState];\n}\n/*\nThe last thing to do is return something from our hook so our hook needs\nto return both the state and\na way of setting that state.\n\nSo we'll just do return state and set state so from the other side of\n'things when we use this hook we\n\nwould just do something like this:\n\nconst [todos, setTodos] = useLocalStorageStatet(\"todos\", []):\n\nconcept to use comma set to DOS equals use local storage state of\nto do is never give it an initial value like an array.\n\nAnd from our end of things we would use this code used to dos and set to\nlose just like they came right\nback from use state.\n\nThe only change is that we intercepted it.\n\nWe base the value in the state the initial value based off of local\nstorage and we have this use effect\n\nthat is listening for a change on to dos and will automatically sync with local storage.\n */\n\nexport default UseLocalStorageState;\n"]},"metadata":{},"sourceType":"module"}